/** @cond */
/**
 * ЮФУ, ИКТИБ, МОП ЭВМ
 * Программирование и основы теории алгоритмов
 * Индивидуальное задание
 * Проектирование и реализация машины Тьюринга
 * Вариант №10.1
 * Кожемякин Ярослав Дмитриевич (КТбо1-7)
 * 18.05.2024
 */
/** @endcond */

#pragma once

#include <map>
#include <set>
#include <string>
#include <vector>

using namespace std;

/**
 * @brief Структура, описывающая переход машины Тьюринга.
 *
 * @param replacement Символ, на который заменяется текущий символ на ленте.
 * @param action Действие, которое нужно выполнить с головкой машины Тьюринга ('>' для перемещения вправо, '<' для перемещения влево).
 * @param to Состояние, в которое переходит машина Тьюринга после выполнения перехода.
 */
struct Transition {
    char replacement;
    char action;
    int to;
};

/**
 * @brief Структура, описывающая ленту машины Тьюринга.
 *
 * @param number Строка, представляющая ленту машины Тьюринга.
 * @param index Индекс текущей позиции головки машины Тьюринга на ленте.
 * @param transition Текущее состояние машины Тьюринга.
 */
struct Tape {
    string number;
    int index;
    int transition;
};

/**
 * @brief Структура, описывающая машину Тьюринга.
 *
 * @param transitions Вектор словарей, описывающих переходы машины Тьюринга. Ключ словаря - это символ на ленте, значение - переход, который нужно выполнить.
 * @param transition_count Количество состояний машины Тьюринга.
 * @param alphabet Множество символов, которые могут быть записаны на ленту машины Тьюринга.
 * @param tape Лента машины Тьюринга.
 */
struct Machine {
    vector<map<char, Transition>> transitions;
    int transition_count;
    set<char> alphabet;
    Tape tape;
};

/**
 * @brief Устанавливает переходы для машины Тьюринга.
 *
 * Эта функция инициализирует переходы для машины Тьюринга.
 * Каждый переход представляет собой изменение состояния и определяется текущим состоянием, символом для чтения, новым состоянием, символом для записи и направлением перемещения.
 * Переходы считываются из файла "transitions.txt", где каждая строка представляет собой один переход.
 * Переходы хранятся в структуре данных.
 *
 * @return Возвращает true, если успешно получилось открыть файл "transitions.txt", и false в противном случае.
 */
bool SetTransitions();

/**
 * @brief Устанавливает алфавит для машины Тьюринга.
 *
 * Эта функция считывает алфавит из файла "alphabet.txt" и устанавливает его для машины Тьюринга.
 * Алфавит представляет собой набор символов, которые могут быть записаны на ленту машины Тьюринга.
 * Каждый символ алфавита считывается из файла и добавляется в множество символов алфавита машины Тьюринга.
 *
 * @return Возвращает true, если успешно получилось открыть файл "alphabet.txt", и false в противном случае.
 */
bool SetAlphabet();

/**
 * @brief Инициализирует машину Тьюринга и запускает процесс конвертации.
 *
 * Эта функция выполняет следующие действия:
 * 1. Устанавливает переходы машины Тьюринга, вызывая функцию SetTransitions().
 * 2. Устанавливает алфавит машины Тьюринга, вызывая функцию SetAlphabet().
 * 3. Устанавливает количество переходов в машине Тьюринга.
 * 4. Инициализирует ленту машины Тьюринга входным числом.
 * 5. Запускает процесс конвертации числа, вызывая функцию Convert().
 * 6. Печатает результат конвертации числа, вызывая функцию PrintResult().
 *
 * @param input Входное число, которое нужно конвертировать.
 */
void Initialize(string);

/**
 * @brief Печатает конфигурацию машины Тьюринга.
 *
 * Эта функция печатает состояние ленты машины Тьюринга до и после выполнения шага.
 * Позиция головки машины Тьюринга выделяется цветом.
 * До выполнения шага позиция головки выделяется красным цветом, после выполнения шага - зеленым.
 *
 * @param before Лента до выполнения шага.
 * @param previous_index Позиция головки до выполнения шага.
 * @param previous_transition Состояние ленты до выполнения шага.
 */
void PrintConfiguration(string, int, int);

/**
 * @brief Печатает результат работы машины Тьюринга.
 *
 * Эта функция выводит на экран состояние ленты машины Тьюринга после завершения всех переходов.
 * Позиция головки машины Тьюринга выделяется желтым цветом.
 */
void PrintResult();

/**
 * @brief Проверяет, является ли входная строка допустимым числом.
 *
 * Эта функция проверяет, что входная строка представляет собой число в троичной системе счисления без ведущих нулей.
 *
 * @param input Входная строка, которую нужно проверить.
 * @return Возвращает true, если входная строка является допустимым числом, и false в противном случае.
 */
bool IsValidInput(string);

/**
 * @brief Проверяет, является ли входная строка допустимым ответом.
 *
 * Эта функция проверяет, что входная строка является одной из допустимых команд ("yes" или "exit").
 *
 * @param answer Входная строка, которую нужно проверить.
 * @return Возвращает true, если входная строка является допустимым ответом, и false в противном случае.
 */
bool IsValidAnswer(string);

/**
 * @brief Проверяет, что все символы входной строки принадлежат алфавиту машины Тьюринга.
 *
 * @param input Входная строка, которую нужно проверить.
 * @return Возвращает true, если все символы входной строки принадлежат алфавиту машины Тьюринга, и false в противном случае.
 */
bool IsValidByAlphabet(string);

/**
 * @brief Перемещает головку машины Тьюринга в указанном направлении.
 *
 * @param action Направление перемещения головки ('>' для перемещения вправо, '<' для перемещения влево).
 */
void MoveHead(char);

/**
 * @brief Выполняет один шаг машины Тьюринга.
 *
 * Эта функция считывает символ на текущей позиции ленты, находит соответствующий переход, заменяет символ на ленте, изменяет состояние машины Тьюринга и перемещает головку.
 */
void Step();

/**
 * @brief Запускает процесс конвертации в машине Тьюринга.
 *
 * Эта функция выполняет шаги машины Тьюринга до тех пор, пока не достигнуто конечное состояние.
 */
void Convert();
